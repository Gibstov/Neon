FEATURES {
    STARTADDRESS: default = $8000;
}
SYMBOLS {
    __EXEHDR__:          type = import;
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
}
MEMORY {
    ZP:            file = "", define = yes, start = $0082, size = $007E;

# file header, just $FFFF
    HEADER:        file = %O,               start = $0000, size = $0002;
	
# Disable Basic
	DISBASHDR:       file = %O,               	start = $0000, size = $0004;
	DISBASIC:      file = %O,               	start = $6000, size = $0039;
	
# Disable Basic INIT	
    DISBASINITHDR:     	file = %O,              start = $0000, size = $0004;
	DISBASINIT: 		file = %O, 				start = $02E2, size = $0002;
	
# "system check" load chunk
    SYSCHKHDR:     file = %O,               start = $0000, size = $0004;
    SYSCHKCHNK:    file = %O,               start = $5000, size = $0300;
    SYSCHKTRL:     file = %O,               start = $0000, size = $0006;

# "main program" load 
	FSTHDR:       file = %O,               start = $0000, size = $0004;   
    RAM:           file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;

	
# DISCARD is set to page 6 for now, because we don't care if that is written to but then again since it goes to file="" it shouldn't matter where it goes
	DISCARD: 	start = $4000, size = $0006, file = ""; 
	
# DLIROUTINE - command place for our DLI routine so it doesn't move on recompiling

	DLIHDR: 	file = %O,               	start = $0000, size = $0004;
	DLIROUTINE:	start = $0600, size = $0018, file = %O;
	
# DLIBUFFER - Hold the buffer for our DLI routines

	DLIBUFFER: 	start = $0640, size = $00E8, file = ""; 
	
# Low RAM
	LOWRAMHDR:       file = %O,               	start = $0000, size = $0004;
	LOWRAMDATA:      file = %O,              	start = $2D00, size = $1400;
	
# Buffers
	BUFFERS:		file = "", 		start = $2800, size = $0500;


    TRAILER:       file = %O,               start = $0000, size = $0006;
}
SEGMENTS {
    EXEHDR:    load = HEADER,     type = ro;
    SYSCHKHDR: load = SYSCHKHDR,  type = ro,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    SYSCHKTRL: load = SYSCHKTRL,  type = ro,                optional = yes;
    MAINHDR:   load = DISCARD,    type = ro;
    STARTUP:   load = RAM,        type = ro,  define = yes;
    LOWCODE:   load = RAM,        type = ro,  define = yes, optional = yes;
    INIT:      load = RAM,        type = ro,                optional = yes;
    CODE:      load = RAM,        type = ro,  define = yes;
    RODATA:    load = RAM,        type = ro;
    DATA:      load = RAM,        type = rw;
    BSS:       load = RAM,        type = bss, define = yes;
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
	
	NEXEHDR:   	load = FSTHDR, type = ro;      # first load chunk
	LOWRAMHDR: 	load = LOWRAMHDR, type = ro;   # second load chunk
	LOWRAMDATA: load = LOWRAMDATA,  type = rw, define = yes;
	
	BUFFERS:	load =  BUFFERS, type = bss;
	
	DLIROUTINE: load = DLIROUTINE, type = rw, define = yes;
	DLIHDR: load = DLIHDR, type = rw, define = yes;
	
	DLIBUFFER:  load = DLIBUFFER, type = bss;
	
	DISBASHDR:	load = DISBASHDR, type = ro;    #Disable Basic Header
	DISBASIC:	load = DISBASIC, type = rw, define = yes;	    
	DISBASINITHDR:  load = DISBASINITHDR, type = ro;            
	DISBASINIT: load = DISBASINIT, type = rw,	define=yes;		#Disable Basic Header
	
    AUTOSTRT:  load = TRAILER,    type = ro;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
